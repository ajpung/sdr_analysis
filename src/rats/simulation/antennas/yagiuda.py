import abc
import datetime
from typing import Literal, List, ClassVar

import numpy as np
from pydantic import Field

from rats.simulation.antennas import Antenna

TOP_DIRECTION = np.array([0.0, 0.0, 1.0])
BOTTOM_DIRECTION = np.array([0.0, 0.0, -1.0])
LEFT_DIRECTION = np.array([0.0, -1.0, 0.0])
RIGHT_DIRECTION = np.array([0.0, 1.0, 0.0])


class YagiUdaAntenna(Antenna, abc.ABC, polymorphic=True):
    """
       Antennas are oriented such that the radiation generated by an ideal,
    symmetric, end-fed Yagi-Uda antenna propagates in the +Y direction. Using
    this logic, Yagi-Uda antennas are built with the boom oriented along the
    Y-axis.
    """

    _directions: List[np.ndarray]
    # TODO: @aaron what are some good defaults here?
    num_sets: int = Field(
        ..., description="The number of sets of directors comprising the antenna"
    )
    reduce_rat: float = Field(
        ..., description="The reduction ration between the first and final directors"
    )

    @property
    @abc.abstractmethod
    def directions(self):
        pass

    def _initialize(self):
        # Calculate spacing from design frequency
        n_elements = len(self._directions) + 1

        # Determine resonant arm lengths
        start_wid = self._wvl / 4  # m
        end_wid = self.reduce_rat * start_wid

        # Iterate wires to create antenna
        for tag_id in np.arange(self.num_sets):
            x_start = tag_id * start_wid
            x_end = (tag_id + 1) * start_wid

            element_len = start_wid - tag_id * ((start_wid - end_wid) / (self.num_sets))
            element_center = np.array([x_start, 0.0, 0.0])

            for i, direction in enumerate(self._directions):
                tin = int(n_elements * tag_id + i)
                start = element_center + (element_len * direction)
                self.create_wire(tag_id=tin, wire_start=element_center, wire_end=start)

            if tag_id < self.num_sets - 1:
                tin = int(n_elements * tag_id + (n_elements - 1))
                center_end = np.array([x_end, 0.0, 0.0])
                self.create_wire(
                    tag_id=tin, wire_start=center_end, wire_end=element_center
                )

    @property
    def diameter(self):
        return self._wvl / 2


class YagiUda2DAntenna(YagiUdaAntenna):
    type: ClassVar[Literal["YAGI_UDA_2D"]] = "YAGI_UDA_2D"
    _directions = [LEFT_DIRECTION, RIGHT_DIRECTION]

    @property
    def directions(self):
        return self._directions

    @property
    def source_index(self) -> int:
        return 0

    def simulate_to(self, dt: datetime.datetime):
        return


class YagiUda3DAntenna(YagiUdaAntenna):
    type: ClassVar[Literal["YAGI_UDA_3D"]] = "YAGI_UDA_3D"
    _directions = [LEFT_DIRECTION, RIGHT_DIRECTION, TOP_DIRECTION, BOTTOM_DIRECTION]

    @property
    def directions(self):
        return self._directions

    @property
    def source_index(self) -> int:
        return 0

    def simulate_to(self, dt: datetime.datetime):
        return
