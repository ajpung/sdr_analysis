import datetime
import math
from typing import Literal, ClassVar

import numpy as np
from pydantic import Field

from rats.simulation.antennas.base import Antenna


class DipoleAntenna(Antenna):
    """
       Antennas are oriented such that the radiation generated by an ideal,
    symmetric, center-fed antenna propagates in the +Y direction. Using
    this logic, dipoles are oriented along the Z-axis.
    """

    type: ClassVar[Literal["DIPOLE"]] = "DIPOLE"
    n: float = Field(1, description="The preferred integer multiple of wavelengths")
    source_input_location: str = Field(
        "center", description="Location on the dipole where source is applied."
    )
    segments: int = Field(
        37, description="Number of segments used to define the dipole wire."
    )

    def _initialize(self):
        if self.segments < 0.002:
            raise ValueError("Segments cant be less than 0.002 m")
        if self.segments % 2 == 0:
            raise ValueError("Segments must be odd")
        top = np.array([0.0, 0.0, self.n / 2 * self._wvl])
        bottom = np.array([0.0, 0.0, -self.n / 2 * self._wvl])
        self.create_wire(
            tag_id=0, segments=self.segments, wire_start=top, wire_end=bottom
        )

    @property
    def diameter(self):
        return 1.0
        # return self.n * self._wvl

    def simulate_to(self, dt: datetime.datetime):
        return

    @property
    def source_index(self):
        if self.source_input_location == "center":
            return math.ceil(self.segments / 2)
        elif self.source_input_location == "start":
            return 1
